Index: ncat_connect.c
===================================================================
--- ncat_connect.c	(revision 23164)
+++ ncat_connect.c	(working copy)
@@ -548,7 +548,6 @@
                 return 1;
         } else if (socksconnect.storage.ss_family != AF_UNSPEC) {
             struct socket_buffer stateful_buf;
-            struct socks4_data socks4msg;
             char socksbuf[8];
 
             connect_socket = do_connect(SOCK_STREAM);
@@ -563,35 +562,126 @@
                 loguser("Connected to proxy %s:%hu\n", inet_socktop(&targetss),
                     inet_port(&targetss));
             }
+            if (!strcmp(o.proxytype, "socks4") || !strcmp(o.proxytype, "4")) {
+                struct socks4_data socks4msg;
+                
+                /* Fill the socks4_data struct */
+                zmem(&socks4msg, sizeof(socks4msg));
+                socks4msg.version = SOCKS4_VERSION;
+                socks4msg.type = SOCKS_CONNECT;
+                socks4msg.port = socksconnect.in.sin_port;
+                socks4msg.address = socksconnect.in.sin_addr.s_addr;
+                if (o.proxy_auth)
+                    Strncpy(socks4msg.username, (char *) o.proxy_auth, sizeof(socks4msg.username));
 
-            /* Fill the socks4_data struct */
-            zmem(&socks4msg, sizeof(socks4msg));
-            socks4msg.version = SOCKS4_VERSION;
-            socks4msg.type = SOCKS_CONNECT;
-            socks4msg.port = socksconnect.in.sin_port;
-            socks4msg.address = socksconnect.in.sin_addr.s_addr;
-            if (o.proxy_auth)
-                Strncpy(socks4msg.username, (char *) o.proxy_auth, sizeof(socks4msg.username));
+                len = 8 + strlen(socks4msg.username) + 1;
 
-            len = 8 + strlen(socks4msg.username) + 1;
+                if (send(connect_socket, (char *) &socks4msg, len, 0) < 0) {
+                    loguser("Error sending proxy request: %s.\n", socket_strerror(socket_errno()));
+                    return 1;
+                }
+                /* The size of the socks4 response is 8 bytes. So read exactly
+                   8 bytes from the buffer */
+              
+                if (socket_buffer_readcount(&stateful_buf, socksbuf, 8) < 0) {
+                    loguser("Error: short response from proxy.\n");
+                    return 1;
+                }
+            
+                if (socksbuf[1] != 90) {
+                    loguser("Proxy connection failed.\n");
+                    return 1;
+                }
+            }else if (!strcmp(o.proxytype, "socks5") || !strcmp(o.proxytype, "5")) {
+                struct socks5_connect socks5msg;
 
-            if (send(connect_socket, (char *) &socks4msg, len, 0) < 0) {
-                loguser("Error sending proxy request: %s.\n", socket_strerror(socket_errno()));
-                return 1;
+                zmem(&socks5msg,sizeof(socks5msg));
+                socks5msg.ver = SOCKS5_VERSION;
+                socks5msg.nmethods = 1;
+                socks5msg.methods[0] = SOCKS5_AUTH_NONE;
+                len = 3; 
+
+                if (o.proxy_auth){
+                    socks5msg.nmethods ++;
+                    socks5msg.methods[1] = SOCKS5_AUTH_USERPASS;
+                    len ++;
+                } 
+                
+                if (send(connect_socket, (char *) &socks5msg, len, 0) < 0) {
+                    loguser("Error: proxy request: %s.\n", socket_strerror(socket_errno()));
+                    return 1;
+                }
+               
+                /* first response just two bytes, version and auth method */
+                if (socket_buffer_readcount(&stateful_buf, socksbuf, 2) < 0) {
+                    loguser("Error - malformed first response from proxy.\n");
+                    return 1;
+                }
+
+                if (socksbuf[1] == SOCKS5_AUTH_FAILED){
+                    loguser("Error - no acceptable authentication methods.\n");
+                    return 1;
+                }
+
+                if (socksbuf[1] > SOCKS5_AUTH_USERPASS){
+                    loguser("Error - undefined authentication method.\n");
+                    return 1;
+                }
+                
+                if (socksbuf[1] == SOCKS5_AUTH_GSSAPI){
+                    loguser("SOCKS5 proxy authentication GSSAPI - not supported.\n");
+                    return 1;
+                }
+
+                if (socksbuf[1] == SOCKS5_AUTH_USERPASS){
+                    loguser("SOCKS5 proxy user and password authentication.\n");
+                    return 1; /* just for now, TODO */
+                }
+
+                struct socks5_request socks5msg2;
+
+                zmem(&socks5msg2,sizeof(socks5msg2));
+                socks5msg2.ver = SOCKS5_VERSION;
+                socks5msg2.cmd = SOCKS_CONNECT;
+                socks5msg2.rsv = 0;
+                len = 3;
+                if (socksconnect.storage.ss_family == AF_INET){
+                    socks5msg2.atyp = SOCKS5_ATYP_IPv4; 
+                    memcpy(socks5msg2.dst, &socksconnect.in.sin_addr.s_addr, sizeof(socksconnect.in.sin_addr.s_addr));
+                    memcpy(socks5msg2.dst+sizeof(socksconnect.in.sin_addr.s_addr), &socksconnect.in.sin_port, sizeof(socksconnect.in.sin_port));
+                    len += sizeof(socksconnect.in.sin_addr.s_addr) + sizeof(socksconnect.in.sin_port) + 1;
+                }else if (socksconnect.storage.ss_family == AF_INET6){
+                    socks5msg2.atyp = SOCKS5_ATYP_IPv6;
+                    memcpy(socks5msg2.dst, &socksconnect.in6.sin6_addr.s6_addr, sizeof(socksconnect.in6.sin6_addr.s6_addr));
+                    memcpy(socks5msg2.dst+sizeof(socksconnect.in6.sin6_addr.s6_addr),&socksconnect.in6.sin6_port,sizeof(socksconnect.in6.sin6_port));
+                    len += sizeof(socksconnect.in6.sin6_addr.s6_addr)+sizeof(socksconnect.in6.sin6_port)+1;
+                }else
+                    socks5msg2.atyp = SOCKS5_ATYP_NAME; // actually not supported yet TODO
+                
+                if (send(connect_socket, (char *) &socks5msg2, len, 0) < 0) {
+                    loguser("Error - sending proxy request: %s.\n", socket_strerror(socket_errno()));
+                    return 1;
+                }
+
+                /* TODO just two bytes for now, need to read more for bind */
+                if (socket_buffer_readcount(&stateful_buf, socksbuf, 2) < 0) {
+                    loguser("Error - malformed second response from proxy.\n");
+                    return 1;
+                }
+                if (socksbuf[1] > 9){
+                    loguser("Error - socks5 server returned an unassigned error.\n");
+                    return 1;
+                }
+                
+                if (socksbuf[1] > 0){
+                    loguser("Error - socks5 server returned %i.\n",socksbuf[1]); // TODO need to define them somewhere
+                    return 1;
+                }
             }
-            /* The size of the socks4 response is 8 bytes. So read exactly
-               8 bytes from the buffer */
-            if (socket_buffer_readcount(&stateful_buf, socksbuf, 8) < 0) {
-                loguser("Error: short reponse from proxy.\n");
-                return 1;
-            }
-            if (socksbuf[1] != 90) {
-                loguser("Proxy connection failed.\n");
-                return 1;
-            }
-
+            /* o.proxytype is not needed any more, moved here from ncat_main.c */
+            free(o.proxytype);
             /* Clear out whatever is left in the socket buffer which may be
-               already sent by proxy server along with http response headers. */
+             already sent by proxy server along with http response headers. */
             line = socket_buffer_remainder(&stateful_buf, &n);
             /* Write the leftover data to stdout. */
             Write(STDOUT_FILENO, line, n);
Index: ncat_main.c
===================================================================
--- ncat_main.c	(revision 23164)
+++ ncat_main.c	(working copy)
@@ -506,7 +506,7 @@
 "      --broker               Enable Ncat's connection brokering mode\n"
 "      --chat                 Start a simple Ncat chat server\n"
 "      --proxy <addr[:port]>  Specify address of host to proxy through\n"
-"      --proxy-type <type>    Specify proxy type (\"http\" or \"socks4\")\n"
+"      --proxy-type <type>    Specify proxy type (\"http\" or \"socks4\" or \"socks5\")\n"
 "      --proxy-auth <auth>    Authenticate with HTTP or SOCKS proxy server\n"
 #ifdef HAVE_OPENSSL
 "      --ssl                  Connect or listen with SSL\n"
@@ -552,12 +552,18 @@
       } else if (!strcmp(o.proxytype, "socks4") || !strcmp(o.proxytype, "4")) {
           /* Parse SOCKS proxy address and temporarily store it in socksconnect */
 
-          parseproxy(proxyaddr, &socksconnect.storage, DEFAULT_SOCKS4_PORT);
+          parseproxy(proxyaddr, &socksconnect.storage, DEFAULT_SOCKS_PORT);
+      } else if (!strcmp(o.proxytype, "socks5") || !strcmp(o.proxytype, "5")) {
+
+          parseproxy(proxyaddr, &socksconnect.storage, DEFAULT_SOCKS_PORT);
       } else {
           bye("Invalid proxy type \"%s\".", o.proxytype);
       }
 
-      free(o.proxytype);
+      /* this is commented out because we need to differentatie between socks server
+       * we can clear that later in ncat_connect.c
+       */
+      //free(o.proxytype);
       free(proxyaddr);
     } else {
       if (o.proxytype) {
Index: ncat.h
===================================================================
--- ncat.h	(revision 23164)
+++ ncat.h	(working copy)
@@ -134,6 +134,21 @@
     unsigned long address;
     char username[256];
 } __attribute__((packed));
+
+struct socks5_connect {
+  char ver;
+  char nmethods;
+  char methods[3];
+} __attribute__((packed));
+
+struct socks5_request {
+  char ver;
+  char cmd;
+  char rsv;
+  char atyp;
+  char dst[256]; // addr/name and port info
+} __attribute__((packed));
+
 #ifdef WIN32
 #pragma pack()
 #endif
@@ -157,8 +172,8 @@
 /* Default Ncat port */
 #define DEFAULT_NCAT_PORT 31337
 
-/* Default port for SOCKS4 */
-#define DEFAULT_SOCKS4_PORT 1080
+/* Default port for SOCKS */
+#define DEFAULT_SOCKS_PORT 1080
 
 /* The default port Ncat will connect to when trying to connect to an HTTP
  * proxy server.  The current setting is the default for squid and probably
@@ -184,6 +199,16 @@
 #define SOCKS_CONN_IDENT        92
 #define SOCKS_CONN_IDENTDIFF    93
 
+/* SOCKS5 protocol */
+#define SOCKS5_VERSION          5
+#define SOCKS5_AUTH_NONE        0
+#define SOCKS5_AUTH_GSSAPI      1
+#define SOCKS5_AUTH_USERPASS    2
+#define SOCKS5_AUTH_FAILED      255
+#define SOCKS5_ATYP_IPv4        1
+#define SOCKS5_ATYP_NAME        3
+#define SOCKS5_ATYP_IPv6        4
+
 /* Length of IPv6 address */
 #ifndef INET6_ADDRSTRLEN
 #define INET6_ADDRSTRLEN 46
